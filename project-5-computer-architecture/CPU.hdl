// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // implement CPU that takes in instruction set that is either A (addressing) or C (computational)
    // A-instruction starts with '0'
    Not(in= instruction[15],out= ni);
    Mux16(a= aluout, b= instruction, sel= ni, out= instrout);
    // load AReg if A-instr or dest is A
    Or(a= ni, b= instruction[5], out= aregload);
    ARegister(in= instrout, load= aregload, out= aregout, out[0..14]=addressM);
    
    // select M if 'C-instr' and '"a" bit is 1'
    And(a= instruction[15], b= instruction[12], out= AorM); 
    Mux16(a= aregout, b= inM, sel= AorM, out= AM);

    // load Dreg if 'C-instr' and 'dest is D' 
    And(a= instruction[15], b= instruction[4], out= dregload); 
    DRegister(in= aluout, load= dregload, out= dregout);

    // alu computation
    ALU(x= dregout, y= AM, zx= instruction[11], nx= instruction[10], 
    zy= instruction[9], ny= instruction[8], f= instruction[7], 
    no= instruction[6], out= aluout, out=outM, zr= zr, ng= ng);
    And(a= instruction[15], b= instruction[3], out= writeM); // write to memory if C-instr and dest is M
    
    // jump logic only applicable to C-instruction
    // case 1: zr only can jump when i[1] true
    And(a= instruction[15], b= instruction[1], out= jmp1);
    And(a= zr, b= jmp1, out= jmp2);
    // case 2: ng can jump if i[2] true and not zero
    And(a= instruction[15], b= instruction[2], out= jmp3);
    And(a= ng, b= jmp3, out= jmp4);
    // case 3: comp pos can jump if i[0] true and not zero
    And(a= instruction[15], b= instruction[0], out= jmp5);
    Or(a= ng, b= zr, out= flag);
    Not(in= flag, out= pos);
    And(a= pos, b= jmp5, out= jmp6);
    // jump if any jump flag is true
    Or(a= jmp2, b= jmp4, out= jmp7);
    Or(a= jmp6, b= jmp7, out= jmp);

    PC(in= aregout, load= jmp, inc= true, reset= reset, out[0..14]= pc);
}